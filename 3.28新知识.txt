1.线程崩溃，进程为什么一定会崩溃？
	各个线程的地址空间是共享的，某个线程对地址的非法访问就会导致内存的不确定性，进而可能会影响到其他线程

2.线程崩溃，进程是怎么崩溃的？
	靠信号机制实现的，通过发送信号使进程退出

3.redis的线程都有什么功能？
	1.关闭文件
	2.AOF刷盘（每秒）
	3.释放 Redis 内存（unlink key / flushdb async / flushall async）删除大KEY时
	4~6.3个IO线程分担 Redis 网络 I/O 的压力

4.RDB 做快照时会阻塞线程吗？
	save会阻塞主线程
	bgsave 创建一个子进程来生成RDB文件，可以避免主线程阻塞。但是当数据特别多的时候fork会比较慢

5.大KEY对redis持久化的影响？
	AOF：当使用总是写回策略的时候，如果写入一个大KEY，会阻塞主线程，因为当写入的数据量很大的时候，数据同步到硬盘这个过程是很耗时的
	AOF重写：当有大KEY的时候，aof文件很快就写满，会很快触发aof重写，创建一个子进程。（写时复制，读时共享）
		创建的进程时会复制页表（虚拟地址），写时会对物理内存进行复制
	RDB：同AOF重写

6.怎么判断 Redis 某个节点是否正常工作？
	主从节点都会有心跳机制， 主节点每0秒发送一个心跳包判断从节点是否存活和连接状态
			         从节点每秒发送，给主节点上报自己的复制偏移量，目的是检查是否丢失数据，如果丢失再从复制缓冲区中拉取数据
	
7.主从复制架构中，过期key如何处理？
	主节点处理一个key或者淘汰算法淘汰了一个key，主节点会模拟一个del命令，发送给从节点。

8.redis主从复制过程？
	1.建立连接：从服务器先发送一个命令，包含主服务器的ID和复制进度，初始化ID是"?"、offset是-1。
		    主服务器返回ID和复制进度
	2.同步数据：主服务器创建一个子进程，生成rdb文件，发送给从服务器，
		    从服务器接收到RDB文件，清空之前的数据，加载RDB文件。
		但是在生成RDB文件，发送RDB文件和加载RDB文件时，有写入操作会导致数据不一致。所以主服务器会将这三个情况的写命令，写入缓冲区。
	3.发送新的命令给从服务器：从服务器加载完成后，会返回一个确认消息，并且主服务器会将缓冲区的命令发给从服务器

9.主从复制时，分摊主服务器的压力？
	压力来自：1.生成RDB文件时，数据过大fork子进程时会阻塞。2.传输RDB文件时，会占用网络带宽。
	解决方法：类似树的结构，主服务器只管理几个从服务器，从服务器再去作为其他服务器的主服务器。
10.主从数据为什么会出现主从数据不一致？
	因为主节点的命令复制是异步进行的，无法实现强一致性。
11.如何如何应对主从数据不一致？
	1、保证网络良好，降低网络延迟
	2、开发一个程序去监控从节点的复制进度，当复制进度的差值大于阈值的时候，就禁止客户端从这个从服务器上获取数据。

12.主从如何做到故障自动切换？
	通过哨兵机制自动完成故障发现和故障转移。（高可用性）

13.为什么要有哨兵机制？
	因为主从架构中，读写是分离的，当主节点挂了之后，就不能有写操作了，也不能进行数据同步。
	哨兵机制就可以自动的选出一个从节点作为主节点

14.哨兵节点是如何监控节点的？
	哨兵会每隔一秒向所有节点发送ping命令，如果在规定时间内没有相应，就会认为这个节点主观下线，哨兵机制一般时多个哨兵组成一个集群，当一个哨兵认为主节点主观下线之后会向其他哨兵询问。当赞成票大于设定的值后，才能认为主节点真正下线。设定的值一般为哨兵个数/2 + 1。

15.故障转移的过程？
	1、选出新的主节点：首先筛掉网络不好的节点，然后根据优先级、复制进度、节点ID（小的更好）来选出新的主节点
	2、将从节点指向新的主节点：哨兵向所有从节点发送命令。（slaveof + IP+ port ）
	3、通知客户的主节点已更换：通过redis的发布订阅机制来通知客户端更换的新的主节点
	4、将旧的主节点变为从节点：哨兵会继续监视旧的主节点，当节点上线之后会将节点变为从节点

16redis集群脑裂丢失数据？
	原因：主从节点间网络出问题了，哨兵会选出新的节点作为主节点，在这期间的写操作会被写入旧的主节点中，当选新的主节点后，旧的主节点会作为从节点进行全量同步，导致丢失数据。
	解决方法：当主节点发现与之相连的从节点数量小于阈值时，或者通信连接超时的时候，会禁止主节点写入数据，并返回给客户端。在新的主节点上线后，再与客户端连接进行操作。

17.

18.

19.为什么要使用非对称加密
	更安全即使获取到公钥也不能获取信息

20.mysql页多大？
	默认是16kb
21.

22.

23.

24.

25.

